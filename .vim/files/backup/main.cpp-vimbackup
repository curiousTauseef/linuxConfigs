#include <QCoreApplication>
#include <QtCore>
#include <opencv2/opencv.hpp>
#include "x264encoder.h"
#include "x264decoder.h"
#include "muxer.h"
extern "C" {
#include <libavcodec/avcodec.h>
#include <libavutil/imgutils.h>
#include<libavutil/opt.h>
}
#include <stdlib.h>
#include <fstream>
#define RGB_SIZE  640 * 480 * 3
#include "hlpFunctions.h"


int main(int argc, char *argv[])
{
    Muxer muxer;
    cv::VideoCapture vc("foreman_cif.y4m");
    cv::Mat image;
    vc.read(image);
    if(muxer.init("muxed.avi", image.cols, image.rows) == false)
        return 1;
    cv::Mat decodedFrame(image.size(), CV_8UC3);
    salam
    x264Encoder encoder;
    x264Decoder decoder;
    encoder.initialize(image.cols, image.rows);
    decoder.initialize(image.cols, image.rows);
    std::queue<x264_nal_t> nalQueue;
	uint frm_nmbr = 0;
    do {
        cvtColor(image, image, CV_BGR2RGB);
        encoder.encodeFrame(image.data, image.size().area());
		char* data = new char[RGB_SIZE];
		unsigned int colorSize = 0;
        while(encoder.isNalsAvailableInOutputQueue() == true)
        {
            x264_nal_t nal = encoder.getNalUnit();
			memcpy(data + colorSize, nal.p_payload, nal.i_payload);
			colorSize += nal.i_payload;
        }
            muxer.writeFrame(data, colorSize);
            decoder.decodeFrame(data, colorSize, decodedFrame.data);
    } while(vc.read(image));
    muxer.close();
    ebi
    return 0;
}
