" general options
set number
set guioptions=
set spell spelllang=en_us
syntax on
filetype plugin on
let mapleader=","

" tab completion
set wildmode=longest,list,full
set wildmenu

" indentation settings
set tabstop=4
set shiftwidth=4
set expandtab
set smartindent
nmap <S-Tab> <<
imap <S-Tab> <Esc><<i

" remove annoying ex-mode feature
nnoremap Q <nop>

" restore old state of file on reload
" au BufWinLeave * mkview
"au BufWinEnter * silent loadview

" syntax highlighting
set term=xterm-256color

hi clear SpellBad
hi clear SpellLocal
hi clear SpellCap
hi clear SpellRare
hi SpellBad cterm=underline
hi SpellLocal cterm=none
hi SpellCap cterm=underline
hi SpellRare cterm=underline

hi Comment cterm=none ctermfg=103
hi Constant cterm=none ctermfg=36
hi Statement cterm=none ctermfg=green

hi VarId cterm=none ctermfg=7 "122
hi Identifier cterm=none ctermfg=7
hi Normal cterm=none ctermfg=7

hi hsType cterm=none ctermfg=130
hi hsDelimiter cterm=none ctermfg=green

" press F10 to debug syntax highlighting under cursor
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" spell checking
fun! IgnoreCamelCaseSpell()
    syn match CamelCase /<[A-Z][a-z]+[A-Z].{-}>/ contains=@NoSpell transparent
    syn cluster Spell add=CamelCase
endfun
autocmd BufRead,BufNewFile * :call IgnoreCamelCaseSpell()

" add md as markdown filetype
autocmd BufNewFile,BufReadPost *.md set filetype=markdown



" haskell settings

"au Bufenter *.hs compiler ghc

" configure browser for haskell_doc.vim
"let g:haddock_browser = "/usr/bin/firefox"
"  let g:ghc = "/usr/bin/ghc"
"  let g:haddock_docdir = "/usr/share/doc/ghc-doc/html"
"let g:haddock_browser = "C:/Program Files/Opera/Opera.exe"
"let g:haddock_browser = "C:/Program Files/Mozilla Firefox/firefox.exe"
"let g:haddock_browser = "C:/Program Files/Internet Explorer/IEXPLORE.exe"

" automatically add bird tracks for literate programming
:set formatoptions+=ro

" remove trailing whitespaces
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" to remember position of opened file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
" enables backspace
set backspace=indent,eol,start
"cnoremap ^_ s/^/\/\/<cr>
nnoremap <leader>nt :tabnew
nnoremap <leader>ut :UndotreeToggle<cr>

" some backup and undo config considerations
set backup
set backupdir   =$HOME/.vim/files/backup/
set backupext   =-vimbackup
set backupskip  =
set directory   =$HOME/.vim/files/swap/
set updatecount =100
set undofile
set undodir     =$HOME/.vim/files/undo/
set viminfo     ='100,n$HOME/.vim/files/info/viminfo
" incsearch plugin
nnoremap <Esc><Esc> :<C-u>nohlsearch<CR>
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
packadd! matchit
" saner command line history
cnoremap <c-n>  <down>
cnoremap <c-p>  <up>
" saner Crl-l
nnoremap <leader>l :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>
" jump to header source files
autocmd BufLeave *.{c,cpp} mark C
autocmd BufLeave *.h       mark H
if empty($TMUX)
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
else
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
endif
" Don't lose selection when shifting sidewards
xnoremap <  <gv
xnoremap >  >gv
" smarter cursorLine
autocmd InsertLeave,WinEnter * set cursorline
autocmd InsertEnter,WinLeave * set nocursorline
autocmd ColorScheme * highlight StatusLine ctermbg=darkgray cterm=NONE guibg=darkgray gui=NONE
autocmd ColorScheme lucius highlight StatusLine ctermbg=darkgray cterm=NONE guibg=darkgray gui=NONE
colorscheme lucius
LuciusDark
" git gutter
nnoremap <leader>gdif :GitGutterLineHighlightsToggle<cr>
" status light
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'lucius',
      \ 'component': {
      \   'readonly': '%{&readonly?"тнд":""}',
      \ },
      \ 'separator': { 'left': '<', 'right': '>' },
      \ 'subseparator': { 'left': '', 'right': 'тоГ' }
      \ }
